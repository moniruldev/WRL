using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;


namespace PG.Core.DBFilters
{
    /// <summary>
    /// For Dynamic Database filter
    /// </summary>
    /// <remarks>
    /// Last Update Date : April, 10, 2010
    /// Update By: Zahir
    /// </remarks>
    public class DBFilter
    {
        private int m_SLNo = 0;
        private string m_Name = string.Empty;
        private string m_FieldName = string.Empty;
        private string m_TableName = string.Empty;
        private bool m_IncludeTableName = false;
        private List<object> m_Values = new List<object>();
        private DBFilterDataTypeEnum m_DataType = DBFilterDataTypeEnum.Integer;
        private DBFilterCompareTypeEnum m_CompareType = DBFilterCompareTypeEnum.EqualTo;
        private DBFilterCombineTypeEnum m_CombineType = DBFilterCombineTypeEnum.AND;
        private bool m_NegateExpression = false;
        private string m_FormatString = string.Empty;
        private bool m_IsPreValue = false;
        private string m_FilterTextPreValue = string.Empty;
        private string m_FilterText = string.Empty;

        private int m_FilterFieldIndex = -1;

        private List<DBFilter> m_DBFilterList = new List<DBFilter>();


        //Instance filter settings
        /// <summary>
        /// SLNo: Serial No of the filter, Required: No
        /// </summary>
        /// 
        
        public int SLNo
        {
            get { return m_SLNo; }
            set { m_SLNo = value; }
        }
        /// <summary>
        /// Name: Name of the filter, Required: No
        /// </summary>
        public string Name 
        {
            get { return m_Name ;}
            set { m_Name = value ; } 
        }
        /// <summary>
        /// FieldName: Name of the field to Query, Required: Yes
        /// </summary>
        public string FieldName
        {
            get { return m_FieldName; }
            set { m_FieldName = value; }
        }
        /// <summary>
        /// TableName: Name of the Table, Required: Yes - if IncludeTableName==true
        /// </summary>
        public string TableName
        {
            get { return m_TableName; }
            set { m_TableName = value; }
        }
        /// <summary>
        /// IncludeTableName: if table name has to include in field name, Default: false
        /// </summary>
        public bool IncludeTableName
        {
            get { return m_IncludeTableName; }
            set { m_IncludeTableName = value; }
        }
        /// <summary>
        /// Values: List of Values to compare, Requried: Yes - at least one value / depends on query type
        /// </summary>
        public List<object> Values
        {
            get { return m_Values; }
            set { m_Values = value; }
        }
        /// <summary>
        /// DataType: Data type of the Field, Default: Integer
        /// </summary>
        public DBFilterDataTypeEnum DataType
        {
            get { return m_DataType; }
            set { m_DataType = value; }
        }
        /// <summary>
        /// CompareType: How to Compare value, Default: EqualTo(=)
        /// </summary>
        public DBFilterCompareTypeEnum CompareType
        {
            get { return m_CompareType; }
            set { m_CompareType = value; }
        }
        /// <summary>
        /// CombineType: Combine type for multiple filter, Defult: AND
        /// </summary>
        public DBFilterCombineTypeEnum CombineType
        {
            get { return m_CombineType; }
            set { m_CombineType = value; }
        }
        /// <summary>
        /// NegateExpression: For Negative compare, Default: False
        /// </summary>
        public bool NegateExpression
        {
            get { return m_NegateExpression; }
            set { m_NegateExpression = value; }
        }


        /// <summary>
        /// FormatString: for filter text, value format , Required: No
        /// </summary>
        public string FormatString
        {
            get { return m_FormatString; }
            set { m_FormatString = value; }
        }
        /// <summary>
        /// FilterText: Stores Filter Text Generated By CreateFilterText(), Required: No
        /// </summary>
        public string FilterText
        {
            get { return m_FilterText; }
            set { m_FilterText = value; }
        }
        /// <summary>
        /// IsPreValue: For CreateFilterText(), Default: False
        /// </summary>
        public bool IsPreValue
        {
            get { return m_IsPreValue; }
            set { m_IsPreValue = value; }
        }
        /// <summary>
        /// FilterTextPreValue: For CreateFilterText(), supply this value from UI, Required: No
        /// </summary>
        public string FilterTextPreValue
        {
            get { return m_FilterTextPreValue; }
            set { m_FilterTextPreValue = value; }
        }

        /// <summary>
        /// FilterFieldIndex: Index of UI List control, Default: -1
        /// </summary>
        public int FilterFieldIndex
        {
            get { return m_FilterFieldIndex; }
            set { m_FilterFieldIndex = value; }
        }


        public List<DBFilter> DBFilterList
        {
            get { return m_DBFilterList; }
            set { m_DBFilterList = value; }
        }


        #region Construtors

        public DBFilter()
        {
            //this.Name = string.Empty;
            //this.FieldName = string.Empty;
            //this.TableName = string.Empty;
            //this.IncludeTableName = false;
            //this.Values = new List<object>();
            //this.DataType = DBFilterDataTypeEnum.Integer;
            //this.CompareType = DBFilterCompareTypeEnum.EqualTo;
            //this.CombineType = DBFilterCombineTypeEnum.AND;
            //this.NegateExpression = false;
            //this.FormatString = string.Empty;
            //this.IsPreValue = false;
            //this.FilterTextPreValue = string.Empty;
            //this.FilterText = string.Empty;

            //this.FilterFieldIndex = -1;

        }

        public DBFilter(string fieldName, object value)
        {
            this.m_FieldName = fieldName;
            if (value is IList && value.GetType().IsGenericType)
            {
                IList list = value as IList;
                if (list != null)
                {
                    foreach (object item in list)
                    {
                        this.m_Values.Add(item);
                    }
                }
            }
            else
            {
                this.m_Values.Add(value);
            }
        }

        public DBFilter(string fieldName, List<object> values)
        {
            this.m_FieldName = fieldName;
            this.m_Values = values;
        }

        public DBFilter(string fieldName, object value, DBFilterDataTypeEnum dataType )
        { 
            this.m_FieldName = fieldName;
            this.m_DataType = dataType;
            if (value is IList && value.GetType().IsGenericType)
            {
                IList list = value as IList;
                if (list != null)
                {
                    foreach (object item in list)
                    {
                        this.m_Values.Add(item);
                    }
                }
            }
            else
            {
                this.m_Values.Add(value);
            }
        }

        public DBFilter(string fieldName, List<object> values, DBFilterDataTypeEnum dataType)
        {
            this.m_FieldName = fieldName;
            this.m_DataType = dataType;
            this.m_Values = values;
        }


        public DBFilter(string fieldName, object value, DBFilterDataTypeEnum dataType, DBFilterCompareTypeEnum compareType)
        {
            this.m_DataType = dataType;
            this.m_CompareType = compareType;
            this.m_FieldName = fieldName;

            //if (value is IList && value.GetType().IsGenericType)
            //list.GetType().GetGenericTypeDefinition() == typeof(List<>)
            //Obj is ICollection

            if (value is IList && value.GetType().IsGenericType)
            {
                IList list = value as IList;
                if (list != null)
                {
                    foreach (object item in list)
                    {
                        this.m_Values.Add(item);
                    }
                }
            }
            else
            {
                this.m_Values.Add(value);
            }

            
            
        }

        public DBFilter(string fieldName, List<object> values, DBFilterDataTypeEnum dataType, DBFilterCompareTypeEnum compareType)
        {
            this.m_DataType = dataType;
            this.m_CompareType = compareType;
            this.m_FieldName = fieldName;
            this.m_Values = values;
        }

        public DBFilter(string fieldName, object value, DBFilterDataTypeEnum dataType, DBFilterCompareTypeEnum compareType, DBFilterCombineTypeEnum combineType)
        {
            this.m_DataType = dataType;
            this.m_CompareType = compareType;
            this.m_CombineType = combineType;
            this.m_FieldName = fieldName;
            if (value is IList && value.GetType().IsGenericType)
            {
                IList list = value as IList;
                if (list != null)
                {
                    foreach (object item in list)
                    {
                        this.m_Values.Add(item);
                    }
                }
            }
            else
            {
                this.m_Values.Add(value);
            }
        }

        public DBFilter(string fieldName, List<object> values, DBFilterDataTypeEnum dataType, DBFilterCompareTypeEnum compareType, DBFilterCombineTypeEnum combineType)
        {
            this.m_DataType = dataType;
            this.m_CompareType = compareType;
            this.m_CombineType = combineType;
            this.m_FieldName = fieldName;
            this.m_Values = values;
        }

        public DBFilter(List<DBFilter> dbFilterList)
        {
            this.m_DBFilterList = dbFilterList;
        }

        public DBFilter(List<DBFilter> dbFilterList, DBFilterCombineTypeEnum combineType)
        {
            this.m_DBFilterList = dbFilterList;
            this.m_CombineType = combineType;
        }

        #endregion

        private void sa()
        {

        }
        

    }
}
